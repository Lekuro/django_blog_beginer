git clone url
cd foulder_name
python3 -m venv venv
source venv/bin/activate
pip install django
django-admin startproject blogengin
cd blogengin
python manago.py startapp blogengin

python manage.py makemigrations
python manage.py migrate
python manage.py runserver
./manage.py runserver

python manage.py createsuperuser

ModelViewControler=mvc

python manage.py shell
from blog.models import BlogPost
p=BlogPost(title='posttitle',slug='postslug',body='postbody')
p.id
p.save()
p.id
p1=BlogPost.objects.create(title='post_title',slug='post_slug',body='post_body')
dir(p)
BlogPost.objects.all()
post=BlogPost.objects.get(slug='postslug')
post=BlogPost.objects.get(slug__iexact='PostSlug')
query_set=BlogPost.objects.filter(slug__contains='lug')
exit()

./manage.py shell
from blog.models import *
t = BlogTag.objects.create(title='TagName',slug='TagSlug')
BlogPost.objects.values()
p=BlogPost.objects.get(slug='postslug')
p
p.tags
p.tags.add(t)
p.tags.all()
t.posts.all()
exit()

./manage.py shell
from blog.models import *
model=BlogPost
model
model.__name__
model.__name__.lower()
BlogPost.mro()
exit()

./manage.py shell
from blog.forms import *
tf=TagForm()
tf
dir(tf)
tf.is_bound    False
tf.is_valid()  False
d={title='',slug=''}
tf=TagForm(d)
tf.is_bound    True
tf.is_valid()  False
tf.errors     
dir(tf)
tf.cleaned_data   {}
d={title='Title Some',slug='slug-Some'}
tf=TagForm(d)
tf.is_valid()  True
tf.errors         {}
tf.cleaned_data
from blog.models import BlogTag
tag=BlogTag(title=tf.cleaned_data['title'],slug=tf.cleaned_data.get('slug'))
tag
tag.save()
tag.id
exit()

./manage.py shell
from blog.forms import *
d={title='Title tag Some',slug='slug-tag-Some'}
tf=TagForm(d)
tf.is_bound    True
tf.is_valid()  True
tf.cleaned_data
t=tf.save()
t
exit()

./manage.py shell
l=['one','ONE','One','two','TWO','Two']
sorted(l)
exit()

./manage.py shell
from django.utils.text import slugify
slugify('One text')
slugify('o _ - 0 !@#$%^&*()+\?`~"=-|1')     'o-_-0-1'
help(slugify)  q    for exit
slugify('хай всім',allow_unicode=True)
exit()

./manage.py shell
from django.core.paginator import Paginator
from blog.models import BlogPost
allpost=BlogPost.objects.all()
allpost
<QuerySet [<BlogPost: post title>, <BlogPost: post_title>, <BlogPost: post_title3>, <BlogPost: post_title4>, <BlogPost: post_title5>, <BlogPost: new post>, <BlogPost: post updated>, <BlogPost: tt>, <BlogPost: post edited>, <BlogPost: post update>, <BlogPost: gen slug>, <BlogPost: create mixin>]>

paginator=Paginator(allpost, 2)
<console>:1: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'blog.models.BlogPost'> QuerySet.
бо не задано в модельці порядок
dir(paginator)
page1=paginator.get_page(1)
dir(page1)
page1.object_list
page1.number
paginator.page_range
page1
paginator
page1.paginator
exit()